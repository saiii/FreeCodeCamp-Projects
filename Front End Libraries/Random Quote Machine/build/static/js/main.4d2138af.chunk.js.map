{"version":3,"sources":["Quotes/Quotes.module.css","Quotes/Quotes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","quotes","color","randomNumber","colors","randomColor","hover","hoverTwitter","hoverTumber","randomHandler","setState","Math","floor","random","length","hoverHandler","prevState","hoverTwitterHandler","hoverTumblrHandler","hoverTumblr","axios","get","then","response","data","this","nextProps","nextState","quote","id","author","twitter","tumblr","style","styleTwitter","styleTumblr","document","body","backgroundColor","className","classes","Text","Number","Author","getElementsByTagName","onmouseover","opacity","Quotes","Button","SocialMedia","href","target","onMouseOver","onMouseOut","class","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d2138af.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Quotes\":\"Quotes_Quotes__1uskm\",\"Button\":\"Quotes_Button__2Ziqp\",\"SocialMedia\":\"Quotes_SocialMedia__fQkK3\",\"Author\":\"Quotes_Author__2mMDX\",\"Text\":\"Quotes_Text__KhSWo\"};","import React from 'react';\nimport axios from 'axios';\nimport classes from './Quotes.module.css';\n\nclass App extends React.Component {\n  state = {\n    quotes: null,\n    color: null,\n    randomNumber: null,\n    colors: ['#fa3c5a', '#447ac4', '#5e73d1', '#194052', '#2d999f', '#ff7142', '#db7164', '#aabec2', '#e3c5fd', '#84d8f1'],\n    randomColor: null,\n    hover: false,\n    hoverTwitter: false,\n    hoverTumber: false\n  }\n\n  componentDidMount() {\n    axios.get(\n      \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\n    )\n    .then(response => {\n      this.setState({quotes: response.data.quotes});\n      this.setState({randomNumber: Math.floor(Math.random() * this.state.quotes.length)});\n    });\n    this.setState({randomColor: this.state.colors[Math.floor(Math.random() * this.state.colors.length)]})\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n      if (this.state.randomNumber !== nextProps.randomNumber) {\n          return true;\n      }\n  }\n  randomHandler = () => {\n    this.setState({randomNumber: Math.floor(Math.random() * this.state.quotes.length)});\n    this.setState({randomColor: this.state.colors[Math.floor(Math.random() * this.state.colors.length)]})\n  }\n\n  hoverHandler = () => {\n      this.setState((prevState) => ({hover: !prevState.hover}))\n  }\n  hoverTwitterHandler = () => {\n    this.setState((prevState) => ({hoverTwitter: !prevState.hoverTwitter}))\n  }\n  hoverTumblrHandler = () => {\n    this.setState((prevState) => ({hoverTumblr: !prevState.hoverTumblr}))\n  }\n  render() {\n    let quote = <p id='text'>Loading</p>;\n    let author = <p id='author'>Loading</p>;\n    let twitter = null;\n    let tumblr = null;\n    let style = null;\n    let styleTwitter = null;\n    let styleTumblr = null;\n    if (this.state.quotes) {\n        document.body.style.backgroundColor = this.state.randomColor;\n        quote = <p id='text' className={classes.Text} style={{color: this.state.randomColor}}><span>\"</span>{this.state.quotes[Number(this.state.randomNumber)].quote}</p>;\n        author = <p id='author' className={classes.Author} style={{color: this.state.randomColor}}>- {this.state.quotes[Number(this.state.randomNumber)].author}</p>;\n        twitter = 'https://twitter.com/intent/tweet?hashtags=quotes&text=\"'+this.state.quotes[Number(this.state.randomNumber)].quote+'\" '+this.state.quotes[Number(this.state.randomNumber)].author;\n        tumblr = 'https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes&caption='+this.state.quotes[Number(this.state.randomNumber)].author+'&content='+this.state.quotes[Number(this.state.randomNumber)].quote+'&canonicalUrl=https%3A%2F%2Fwww.tumblr.com%2Fbuttons&shareSource=tumblr_share_button';\n        document.getElementsByTagName('button').onmouseover = function() {\n        }\n    if (this.state.hover) {\n        style = {opacity: '0.6', backgroundColor: this.state.randomColor}\n    } else {\n        style = {opacity: '1', backgroundColor: this.state.randomColor}\n    }\n    if (this.state.hoverTwitter) {\n        styleTwitter = {opacity: '0.6', backgroundColor: this.state.randomColor}\n    } else {\n        styleTwitter = {opacity: '1', backgroundColor: this.state.randomColor}\n    }\n    if (this.state.hoverTumblr) {\n        styleTumblr = {opacity: '0.6', backgroundColor: this.state.randomColor}\n    } else {\n        styleTumblr = {opacity: '1', backgroundColor: this.state.randomColor}\n    }\n    }\n    \n    return (\n      <div id=\"quote-box\" className={classes.Quotes}>\n        {quote}\n        {author}\n        <div className={classes.Button}>\n            <div className={classes.SocialMedia}>\n                <a id=\"tweet-quote\" href={twitter}  target='_blank' style={styleTwitter} onMouseOver={this.hoverTwitterHandler} onMouseOut={this.hoverTwitterHandler}><div><i class='fab fa-twitter'></i></div></a>\n                <a href={tumblr} target='_blank' style={styleTumblr} onMouseOver={this.hoverTumblrHandler} onMouseOut={this.hoverTumblrHandler}><div><i class=\"fab fa-tumblr\"></i></div></a>\n            </div>\n            <div>\n                <button id=\"new-quote\" onClick={this.randomHandler} onMouseOver={this.hoverHandler} onMouseOut={this.hoverHandler} style={style}>New quote</button>\n            </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport './App.css';\nimport Quotes from './Quotes/Quotes';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <Quotes />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}